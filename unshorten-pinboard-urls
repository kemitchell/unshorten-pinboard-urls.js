#!/usr/bin/env node
var flushWriteStream = require('flush-write-stream')
var http = require('http-https')
var jsonArrayStreams = require('json-array-streams')
var parse = require('url').parse
var pump = require('pump')
var querystring = require('querystring')
var runSeries = require('run-series')
var through2 = require('through2')

// Read the Pinboard authentication token from the environment.
var TOKEN = process.env.PINBOARD_TOKEN
if (!TOKEN) {
  process.stdout.write('Missing PINBOARD_TOKEN')
  process.exit(1)
}

// Request all of the Pinboard user's posts in JSON format.
http.request({
  protocol: 'https:',
  host: 'api.pinboard.in',
  path: '/v1/posts/all?' + querystring.stringify({
    auth_token: TOKEN,
    format: 'json'
  })
})
  .once('response', function (response) {
    pump(
      response,
      // The Pinboard API responds with a JSON Array.
      // Each Object in the Array is a post.
      jsonArrayStreams.parse(),
      // Filter out only those posts with short-URL HREFs.
      through2.obj(function (post, _, done) {
        if (isShortenedPost(post)) {
          this.push(post)
        }
        done()
      }),
      // For each short-URL post:
      flushWriteStream.obj(function (post, _, done) {
        // Unshorten the short URL.
        unshorten(post.href, function (error, unshortened) {
          if (error) {
            done(error)
          } else {
            runSeries([
              // Create a new post the same as the old post, but for the
              // unshortened URL.
              createReplacementPost.bind(null, post, unshortened),
              //  Delete the old, shortened-URL post.
              deletePost.bind(null, post)
            ], function (error) {
              if (error) {
                done(error)
              } else {
                // Log a message for each post replaced.
                console.log('%s    =>    %s', post.href, unshortened)
                done()
              }
            })
          }
        })
      }),
      function (error) {
        if (error) {
          console.error(error)
          process.exit(1)
        }
      }
    )
  })
  .end()

var SHORTENER_HOSTNAMES = ['t.co', 'bit.ly', 'goo.gl', 'owl.ly']

function isShortenedPost (post) {
  return SHORTENER_HOSTNAMES.indexOf(parse(post.href).hostname) !== -1
}

// Shorten a URL by sending a HEAD request and calling back with the
// HTTP Location header value.
function unshorten (url, callback) {
  var parsed = parse(url)
  var protocol = parsed.protocol
  var options = {
    method: 'HEAD',
    protocol: protocol,
    host: parsed.host,
    path: parsed.pathname
  }
  http.request(options)
    .once('response', function (response) {
      var location = response.headers.location
      if (location) {
        callback(null, location)
      } else {
        callback(null, url)
      }
    })
    .once('error', callback)
    .end()
}

function deletePost (post, callback) {
  sendRequest({
    path: '/v1/posts/delete?' + querystring.stringify({
      auth_token: TOKEN,
      format: 'json',
      url: post.href
    })
  }, callback)
}

function createReplacementPost (post, unshortened, callback) {
  sendRequest({
    path: '/v1/posts/add?' + querystring.stringify({
      auth_token: TOKEN,
      format: 'json',
      url: unshortened,
      description: post.description,
      extended: post.extended,
      tags: post.tags,
      dt: post.time,
      shared: post.shared,
      toread: post.toread,
      replace: 'no'
    })
  }, callback)
}

function sendRequest (options, callback) {
  options.protocol = 'https:'
  options.host = 'api.pinboard.in'
  http.request(options)
    .once('response', function (response) {
      var status = response.statusCode
      if (status === 200) {
        callback()
      } else {
        callback(new Error('The server responded ' + status + '.'))
      }
    })
    .once('error', callback)
  .end()
}
