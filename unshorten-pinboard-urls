#!/usr/bin/env node
var flushWriteStream = require('flush-write-stream')
var http = require('http-https')
var jsonArrayStreams = require('json-array-streams')
var multistream = require('multistream')
var parse = require('url').parse
var pump = require('pump')
var querystring = require('querystring')
var runSeries = require('run-series')
var through2 = require('through2')

// Read the Pinboard authentication token from the environment.
var TOKEN = process.env.PINBOARD_TOKEN
if (!TOKEN) {
  process.stdout.write('Missing PINBOARD_TOKEN')
  process.exit(1)
}

var PINBOARD_API = 'api.pinboard.in'

var RESULTS_PER_REQUEST = 100
var requestCount = 0
// In order to tell when to stop issuing new requests with incremented
// `start` positions, count the number of posts from each response.
var postsFromLastStream = 0

// Request all of the Pinboard user's posts in JSON format.
pump(
  multistream(function (callback) {
    if (postsFromLastStream === 0) {
      callback(null, null)
    } else {
      http.request({
        protocol: 'https:',
        host: PINBOARD_API,
        path: '/v1/posts/all?' + querystring.stringify({
          auth_token: TOKEN,
          results: RESULTS_PER_REQUEST,
          start: requestCount * RESULTS_PER_REQUEST,
          format: 'json'
        })
      })
        .once('error', callback)
        .once('response', function (response) {
          requestCount++
          // Reset the posts counter when this stream begins sending
          // post data.
          response.once('data', function () {
            postsFromLastStream = 0
          })
          callback(null, response)
        })
        .end()
    }
  }),
  // The Pinboard API responds with a JSON Array.
  // Each Object in the Array is a post.
  jsonArrayStreams.parse(),
  // Filter out only those posts with short-URL HREFs.
  through2.obj(function (post, _, done) {
    postsFromLastStream++
    if (isShortenedPost(post)) {
      this.push(post)
    }
    done()
  }),
  // For each short-URL post:
  flushWriteStream.obj(function (post, _, done) {
    // Unshorten the short URL.
    unshorten(post.href, function (error, unshortened) {
      if (error) return done(error)
      if (unshortened !== post.href) {
        runSeries([
          // Add a new post the same as the old post, but for the
          // unshortened URL.
          addReplacementPost.bind(null, post, unshortened),
          //  Delete the old, shortened-URL post.
          deletePost.bind(null, post)
        ], function (error) {
          if (error) return done(error)
          if (unshortened !== post.href) {
            runSeries([
              // Add a new post the same as the old post, but for the
              // unshortened URL.
              addReplacementPost.bind(null, post, unshortened),
              //  Delete the old, shortened-URL post.
              deletePost.bind(null, post)
            ], function (error) {
              if (error) {
                done(error)
              } else {
                // Log a message for each post replaced.
                console.log('%s    =>    %s', post.href, unshortened)
                done()
              }
            })
          } else {
            // Log a message for each post replaced.
            console.log('%s    =>    %s', post.href, unshortened)
            done()
          }
        })
      } else {
        done()
      }
    })
  }),
  function (error) {
    if (error) {
      console.error(error)
      process.exit(1)
    }
  }
)

var SHORTENER_HOSTNAMES = [
  't.co', 'bit.ly', 'goo.gl', 'owl.ly', 'buff.ly'
]

function isShortenedPost (post) {
  return SHORTENER_HOSTNAMES.indexOf(parse(post.href).hostname) !== -1
}

// Shorten a URL by sending a HEAD request and calling back with the
// HTTP Location header value.
function unshorten (url, callback) {
  var parsed = parse(url)
  var protocol = parsed.protocol
  var options = {
    method: 'HEAD',
    protocol: protocol,
    host: parsed.host,
    path: parsed.pathname
  }
  http.request(options)
    .once('error', callback)
    .once('response', function (response) {
      var location = response.headers.location
      if (location) {
        callback(null, location)
      } else {
        callback(null, url)
      }
    })
    .end()
}

function deletePost (post, callback) {
  sendRequest({
    path: '/v1/posts/delete?' + querystring.stringify({
      auth_token: TOKEN,
      url: post.href
    })
  }, callback)
}

var POST_PROPERTIES = [
  'description', 'extended', 'tags', 'time', 'shared', 'toread'
]

function addReplacementPost (post, unshortened, callback) {
  var query = {
    auth_token: TOKEN,
    url: unshortened,
    replace: 'no'
  }
  POST_PROPERTIES.forEach(function (key) {
    query[key] = post[key]
  })
  sendRequest({
    path: '/v1/posts/add?' + querystring.stringify(query)
  }, callback)
}

function sendRequest (options, callback) {
  options.protocol = 'https:'
  options.host = PINBOARD_API
  http.request(options)
    .once('error', callback)
    .once('response', function (response) {
      var status = response.statusCode
      if (status === 200) {
        callback()
      } else {
        callback(new Error('The server responded ' + status + '.'))
      }
    })
    .end()
}
