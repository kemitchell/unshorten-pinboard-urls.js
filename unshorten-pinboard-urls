#!/usr/bin/env node
const flushWriteStream = require('flush-write-stream')
const http = require('http-https')
const jsonArrayStreams = require('json-array-streams')
const multistream = require('multistream')
const pump = require('pump')
const querystring = require('querystring')
const runSeries = require('run-series')
const through2 = require('through2')

// Read the Pinboard authentication token from the environment.
const TOKEN = process.env.PINBOARD_TOKEN
if (!TOKEN) {
  process.stdout.write('Missing PINBOARD_TOKEN')
  process.exit(1)
}

const PINBOARD_API = 'api.pinboard.in'

const RESULTS_PER_REQUEST = 100
let requestCount = 0
// In order to tell when to stop issuing new requests with incremented
// `start` positions, count the number of posts from each response.
let postsFromLastStream = null

// Request all of the Pinboard user's posts in JSON format.
pump(
  new multistream(callback => {
    if (postsFromLastStream === 0) return callback(null, null)
    http.request({
      protocol: 'https:',
      host: PINBOARD_API,
      path: '/v1/posts/all?' + querystring.stringify({
        auth_token: TOKEN,
        results: RESULTS_PER_REQUEST,
        start: requestCount * RESULTS_PER_REQUEST,
        format: 'json'
      })
    })
      .once('error', callback)
      .once('response', response => {
        requestCount++
        // Reset the posts counter when this stream begins sending
        // post data.
        postsFromLastStream = 0
        callback(null, response)
      })
      .end()
  }),

  // The Pinboard API responds with a JSON Array.
  // Each Object in the Array is a post.
  jsonArrayStreams.parse(),

  // Filter out only those posts with short-URL HREFs.
  through2.obj(function (post, _, done) {
    postsFromLastStream++
    if (isShortenedPost(post)) {
      this.push(post)
    }
    done()
  }),

  // For each short-URL post:
  flushWriteStream.obj((post, _, done) => {
    // Unshorten the short URL.
    unshorten(post.href, (error, unshortened) => {
      if (error) return done(error)
      if (unshortened !== post.href) {
        runSeries([
          // Add a new post the same as the old post, but for the
          // unshortened URL.
          addReplacementPost.bind(null, post, unshortened),
          //  Delete the old, shortened-URL post.
          deletePost.bind(null, post)
        ], error => {
          if (error) return done(error)
          // Log a message for each post replaced.
          console.log('%s    =>    %s', post.href, unshortened)
          done()
        })
      } else {
        done()
      }
    })
  }),

  error => {
    if (error) {
      console.error(error)
      process.exit(1)
    }
  }
)

const SHORTENER_HOSTNAMES = [
  't.co', 'bit.ly', 'goo.gl', 'owl.ly', 'buff.ly'
]

function isShortenedPost (post) {
  return SHORTENER_HOSTNAMES.indexOf(new URL(post.href).hostname) !== -1
}

// Shorten a URL by sending a HEAD request and calling back with the
// HTTP Location header value.
function unshorten (url, callback) {
  const { protocol, host, pathname } = new URL(url)
  http.request({
    method: 'HEAD',
    protocol,
    host,
    pathname
  })
    .once('error', callback)
    .once('response', response => {
      callback(null, response.headers.location || url)
    })
    .end()
}

function deletePost (post, callback) {
  sendRequest({
    path: '/v1/posts/delete?' + querystring.stringify({
      auth_token: TOKEN,
      url: post.href
    })
  }, callback)
}

const POST_PROPERTIES = [
  'description', 'extended', 'tags', 'shared', 'toread'
]

function addReplacementPost (post, unshortened, callback) {
  const query = {
    auth_token: TOKEN,
    url: unshortened,
    dt: post.time,
    replace: 'no'
  }
  POST_PROPERTIES.forEach(key => {
    query[key] = post[key]
  })
  sendRequest({
    path: '/v1/posts/add?' + querystring.stringify(query)
  }, callback)
}

function sendRequest (options, callback) {
  options.protocol = 'https:'
  options.host = PINBOARD_API
  http.request(options)
    .once('error', callback)
    .once('response', response => {
      const status = response.statusCode
      if (status === 200) {
        callback()
      } else {
        callback(new Error('The server responded ' + status + '.'))
      }
    })
    .end()
}
